<?php

/**
 * Implementation of hook_perm()
 */
function faze_quiz_course_perm()
{
  return array('faze_quiz_course teacher');
}

/**
 * Implemrntaion of hook_views_api().
 *
 */
function faze_quiz_course_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'faze_quiz_course') . '/modules',
  );
}

/**
 * Implementing hook_menu()
 */
function faze_quiz_course_menu(){
  $items=array();
  /*$items['faze_quiz_course_add_question_to_subject/%/%'] = array(
    'page callback' => 'faze_quiz_course_menu_add_question_to_subject',
    'page arguments' => array(1,2),
  	'access callback' => 'faze_quiz_course_menu_add_question_to_subject_access',
	'access arguments' => array(1,2),
  );*/
  $items['manage_questions'] = array(
    'title' => t('ניהול שאלות'),
    'page callback' => 'faze_quiz_course_manage_questions',
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'file' => 'manage_question.inc',
  );
  $items['manage_course_student'] = array(
    'title' => t('ניהול תלמידים'),
    'page callback' => 'faze_quiz_course_manage_course_student',
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'file' => 'manage_course_student.inc',
  );
  $items['add_task'] = array(
    'title' => t('הוספת משימה למקצוע'),
    'page callback' => 'faze_quiz_course_add_task',
    'page arguments' => array(0),
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'file' => 'add_task.inc',
  );
 $items['edit_task/%node'] = array(
    'title' => t('עריכת משימה למקצוע'),
    'page callback' => 'faze_quiz_course_add_task',
    'page arguments' => array(1),
    'access callback' => 'faze_quiz_course_access_edit_task',
    'access arguments' => array(1),
    'file' => 'add_task.inc',
  );
  
  $items['task/%node'] = array(
    'title' => t('דף משימה'),
    'page callback' => 'faze_quiz_course_task_page',
    'page arguments' => array(1),
    'access callback' => 'faze_quiz_course_access_task_page',
    'access arguments' => array(1),
    'file' => 'task_page.inc',
  );
  
  $items['course/%'] = array(
    'title' => t('דף מקצוע'),
    'page callback' => 'faze_quiz_course_course_page',
    'page arguments' => array(1),
    'access callback' => 'faze_quiz_course_access_course_page',
    'access arguments' => array(1),
    'file' => 'course_page.inc',
  );
  
  $items['quiz/addbytask/%node'] = array(
    'page callback' => 'faze_quiz_course_add_quiz_by_task_page',
    'page arguments' => array(2),
    'access callback' => 'faze_quiz_course_access_add_quiz_by_task',
    'access arguments' => array(2),
    'file' => 'task_page.inc',
  );

  $items['questions_bank'] = array(
    'title' => t('מאגר שאלות'),
    'page callback' => 'faze_quiz_course_manage_questions',
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'file' => 'manage_question.inc',
    'menu_name' => 'primary-links',
  );

  $items['manage_questions/add_course'] = array(
    'title' => t('הוספת מקצוע'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faze_quiz_course_add_course_form'),
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'menu_name' => 'primary-links',
    'plid' => 1180,
    //'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['manage_questions/add_course_subject'] = array(
    'title' => t('הופסת נושא למקצוע'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faze_quiz_course_add_subject_form'),
    'access callback' => 'user_access',
    'access arguments' => array('faze_quiz_course teacher'),
    'menu_name' => 'primary-links',
    'plid' => 1180,
    //'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * We want to change be more specific in the permissions we give to users.
 */
function faze_quiz_course_menu_alter(&$items) {
  // let techer watch his student quiz
  $items['quiz/%node']['access callback'] = 'faze_quiz_course_quiz_access';
}

/**
 * Access callback function for quiz/%node menu path
 */
function faze_quiz_course_quiz_access($node){
  global $user;
  if (faze_quiz_quiz_access($node)) return true;
  if ($node->type!="quiz" || $node->field_task_nid[0]['value']<=0) return false;
  $task_node=node_load($node->field_task_nid[0]['value']);
  if ($task_node->type== 'task' && $task_node->uid==$user->uid) return true;
  return FALSE;
}

/**
 * access function to edit task
 */
function faze_quiz_course_access_edit_task($node){
  global $user;
  return ($node->type== 'task' && $node->uid==$user->uid);
}


/**
 * access function to task page
 */
function faze_quiz_course_access_task_page($node){
  global $user;
  if ($node->type== 'task' && $node->uid==$user->uid)
    return true; //techer 
  return false;
}

/**
 * access function to course page
 */
function faze_quiz_course_access_course_page($cid){
  global $user;
  $course = faze_quiz_course_get_course($cid);
  //dsm($course);
  if ($course->teacher_uid==$user->uid)
    return true; //techer 
  return faze_quiz_course_is_student_on_course($cid,$user->uid);
}

/**
 * access function to add quiz by task
 */
function faze_quiz_course_access_add_quiz_by_task($node){
  //chcke if the user is student of this coese.
  global $user;
  $uid=$user->uid;
  $cid=$node->field_course_cid[0]['value'];
  return faze_quiz_course_is_student_on_course($cid,$uid);  
}

/**
 * add course.
 * @param $name
 *   varchar course name
 * @param $teacher_uid
 *   integer techer uid
 * @return
 *   Status constant indicating if course was add.
 */
function faze_quiz_course_add_course($name,$teacher_uid){
  return db_query('INSERT INTO {faze_quiz_course_course} (teacher_uid, name) VALUES (%d, "%s")', $teacher_uid, $name);
}


/**
 * remove course and the subject of the course.
 * @param $cid
 *   integer course id
 * @return
 *   Status constant indicating if course was remove.
 */
function faze_quiz_course_remove_course($cid){
  return db_query('DELETE FROM `faze_quiz_course_course` WHERE `cid` = %d',$cid)
        && db_query('DELETE FROM `faze_quiz_course_course_subject` WHERE `cid` = %d',$cid);
}


/**
 * get course deitals.
 * @param $cid
 *   integer course id.
 * @return
 *   course object with subject array.
 */
function faze_quiz_course_get_course($cid){
  if (!$cid && !intval($cid)) {
    return;
  }
  $sql = "SELECT * FROM {faze_quiz_course_course} WHERE cid = %d";
  $reference = db_fetch_object(db_query($sql, intval($cid)));
  if ($reference) { //only unserialize existing db row
    $reference->cid = intval($reference->cid);
    $reference->teacher_uid = intval($reference->teacher_uid);
  }
  $sql = "SELECT * FROM {faze_quiz_course_course_subject} WHERE cid = %d";
  $result = db_query($sql, intval($cid));
  $reference->subject = array();
  while (($reference_subject = db_fetch_object($result)) != NULL) {
    $reference_subject->cid = intval($reference_subject->cid);
    $reference_subject->sid = intval($reference_subject->sid);
  	$reference->subject[] = $reference_subject;
  }
  return $reference;
}

/**
 * get course of techer.
 * @param $teacher_uid
 *   integer uid of the techer
 * @return
 *   array of course object.
 */
function faze_quiz_course_get_techer_courses($teacher_uid){
  if (!$teacher_uid && !intval($teacher_uid)) {
    return;  
  }
 
  $sql = "SELECT * FROM {faze_quiz_course_course} WHERE teacher_uid = %d";
  $result = db_query($sql, intval($teacher_uid));
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $reference->cid = intval($reference->cid);
    $reference->teacher_uid = intval($reference->teacher_uid);
  	$references[] = $reference;
  }
  return $references;
}

/**
 * add subject.
 * @param $name
 *   varchar subject name
 * @param $cid
 *   integer techer uid
 * @return
 *   Status constant indicating if subject was add.
 */
function faze_quiz_course_add_subject($name,$cid){
  return db_query('INSERT INTO {faze_quiz_course_course_subject} (cid, name) VALUES (%d, "%s")', $cid, $name);
}


/**
 * remove subject.
 * @param $sid
 *   integer subject id
 * @return
 *   Status constant indicating if subject was remove.
 */
function faze_quiz_course_remove_subject($sid){
  return db_query('DELETE FROM `faze_quiz_course_course_subject` WHERE `sid` = %d',$sid);
}

/**
 * get subject deitals.
 * @param $cid
 *   integer course id.
 * @return
 *   course subject with question_nid array.
 */
function faze_quiz_course_get_subject($sid){
  if (!$sid && !intval($sid)) {
    return;
  }
  $sql = "SELECT faze_quiz_course_course_subject.sid AS sid, faze_quiz_course_course_subject.cid AS cid, faze_quiz_course_course_subject.name AS name , faze_quiz_course_course.name AS course_name
  			FROM {faze_quiz_course_course_subject} 
  			LEFT JOIN faze_quiz_course_course ON faze_quiz_course_course_subject.cid=faze_quiz_course_course.cid
  			WHERE sid = %d";
  $reference = db_fetch_object(db_query($sql, intval($sid)));
  if ($reference) { //only unserialize existing db row
    $reference->cid = intval($reference->cid);
    $reference->sid = intval($reference->sid);
  }
  $sql = "SELECT * FROM {faze_quiz_course_question_subject} WHERE sid = %d";
  $result = db_query($sql, intval($sid));
  $reference->subject = array();
  while (($reference_question = db_fetch_object($result)) != NULL) {
    /*$reference_question->qid = intval($reference_question->qid);
    $reference_question->sid = intval($reference_question->sid);
  	$reference->subject[] = $reference_question;*/
  	$reference->questions_nid[] = intval($reference_question->qid);
  }
  return $reference;
}

/**
 * get subject name.
 * @param $cid
 *   integer course id.
 * @return
 *   course subject name.
 */
function faze_quiz_course_get_subject_name($sid){
  if (!$sid && !intval($sid)) {
    return;
  }
  $sql = "SELECT * FROM {faze_quiz_course_course_subject} WHERE sid = %d";
  $reference = db_fetch_object(db_query($sql, intval($sid)));
  if ($reference) { //only unserialize existing db row
    return $reference->name;
  }
  return null;
}

/**
 * add question to subject.
 * @param $question_nid
 *   integer the nid of the question
 * @param $sid
 *   integer the id of the subject
 * @return
 *   Status constant indicating if subject was add.
 */
function faze_quiz_course_add_question_to_subject($question_nid,$sid){
  //@todo chack if $question_nid and $sid valid, and not set yet.  
  return db_query('INSERT INTO {faze_quiz_course_question_subject} (qid, sid) VALUES (%d, %d)', $question_nid, $sid);
}


/**
 * remove question from subject.
 * @param $question_nid
 *   integer the nid of the question
 * @param $sid
 *   integer the id of the subject
 * @return
 *   Status constant indicating if subject was remove.
 */
function faze_quiz_course_remove_question_from_subject($question_nid,$sid){
  return db_query('DELETE FROM `faze_quiz_course_course_subject` WHERE `sid` = %d AND qid= %d',$sid,$question_nid);
}

/**
 * add studernt to course.
 * @param $cid
 *   integer the id of the course
 * @param $uid
 *   integer the uid of the student
 * @return
 *   Status constant indicating if subject was add.
 */
function faze_quiz_course_add_student_to_course($cid,$uid){
  if (faze_quiz_course_is_student_on_course($cid,$uid)) return false;
  return db_query('INSERT INTO {faze_quiz_course_course_student} (cid, uid) VALUES (%d, %d)', $cid, $uid);
}

/**
 * get student in course.
 * @param $cid
 *   integer course id.
 * @return
 *   array of user object.
 */
function faze_quiz_course_get_student_in_course($cid){
  if (!$cid && !intval($cid)) {
    return;
  }
  $sql = "SELECT uid FROM {faze_quiz_course_course_student} WHERE cid = %d";
  $result=db_query($sql, intval($cid));
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
  	$references[]=user_load($reference->uid);
  }
  return $references;
}

/**
 * check if studernt in course.
 * @param $cid
 *   integer the id of the course
 * @param $uid
 *   integer the uid of the student
 * @return
 *   bool.
 */
function faze_quiz_course_is_student_on_course($cid,$uid){
  $result=db_query('SELECT uid FROM `faze_quiz_course_course_student` WHERE `cid` = %d AND uid= %d',$cid,$uid);
  if (db_fetch_object($result))
    return true;
  return false;
}


/**
 * remove studernt from course.
 * @param $cid
 *   integer the id of the course
 * @param $uid
 *   integer the uid of the student
 * @return
 *   Status constant indicating if subject was remove.
 */
function faze_quiz_course_remove_student_from_course($cid,$uid){
  return db_query('DELETE FROM `faze_quiz_course_course_student` WHERE `cid` = %d AND uid= %d',$cid,$uid);
}

/**
 * get student level in course
 * @param $user
 *   drupal user object
 * @param $cid
 *   integer student cid
 * @return
 *   float user level
 */
function faze_quiz_course_get_user_level_in_course($user,$cid){
  $sql = "SELECT level
 			FROM faze_quiz_course_course_student 
 			WHERE (faze_quiz_course_course_student.cid =%d ) AND (faze_quiz_course_course_student.uid = %d)";
  $result = db_query($sql, intval($cid),$user->uid);
  if (($reference = db_fetch_object($result)) != NULL) { 
    return $reference->level;
  }
  return null;
}


/**
 * get courses by techer and student
 * @param $techer_uid
 *   integer techer uid
 * @param $student_uid
 *   integer student uid
 * @return
 *   courses array of all courses of the techer with this student.
 */
function faze_quiz_course_get_course_by_techer_student($techer_uid, $student_uid){
  if (!$techer_uid && !intval($techer_uid) && !$student_uid && !intval($student_uid)) {
    return;
  }
  $sql = "SELECT course.cid AS cid, course.name AS c_name
			FROM `faze_quiz_course_course` AS course
			JOIN `faze_quiz_course_course_student` AS course_student
			ON course_student.`cid` = course.`cid`
			WHERE `course_student`.`uid`=%d
			AND course.`teacher_uid`=%d";
  $result = db_query($sql, intval($student_uid),intval($techer_uid));
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $reference->cid = intval($reference->cid);
  	$references[] = $reference;
  }
  return $references;
}

/**
 * get quiz by task and student
 * @param $task_nid
 *   integer task nid
 * @param $student_uid
 *   integer student uid
 * @return
 *   quiz status and nid
 */
function faze_quiz_course_get_quiz_by_task_student($task_nid, $student_uid){
  if (!$task_nid && !intval($task_nid) && !$student_uid && !intval($student_uid)) {
    return;
  }
  $sql = "SELECT node.nid AS q_nid,
   			node_data_field_task_nid.field_completed_value AS completed
 			FROM node node 
 			LEFT JOIN content_type_quiz node_data_field_task_nid ON node.vid = node_data_field_task_nid.vid
 			WHERE (node.type ='quiz' ) AND (node_data_field_task_nid.field_task_nid_value = %d) AND (node.uid=%d)";
  $result = db_query($sql, intval($task_nid),intval($student_uid));
  $reference = null;  
  if (($reference = db_fetch_object($result)) != NULL) { 
    $reference->q_nid = intval($reference->q_nid);
  	$reference->completed = intval($reference->completed)==1?TRUE:FALSE;
  }
  return $reference;
}

function faze_quiz_course_get_task_in_course($cid){
  if (!$cid && !intval($cid)) {
    return;
  }
  $sql = "SELECT nid AS task_nid
 			FROM content_type_task 
 			WHERE (field_course_cid_value = %d)";
  $result = db_query($sql, intval($cid));
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $references[] = node_load(intval($reference->task_nid));
  }
  return $references;
}

/**
 * get question subjects by techer
 * @param $question_nid
 *   integer course id.
 * @param $techer_uid
 *   integer techer uid
 * @return
 *   subject array of all subject of the techer that have the question.
 */
function faze_quiz_course_get_question_subject($question_nid, $techer_uid){
  if (!$question_nid && !intval($question_nid) && !$techer_uid && !intval($techer_uid)) {
    return;
  }
  $sql = "SELECT subject.sid AS sid, subject.cid AS cid, subject.name AS s_name, course.name AS c_name
			FROM `faze_quiz_course_course_subject` AS subject
			JOIN `faze_quiz_course_question_subject` 
			ON subject.`sid` = `faze_quiz_course_question_subject`.`sid`
			JOIN `faze_quiz_course_course` AS course
			ON subject.`cid` = course.`cid`
			WHERE `faze_quiz_course_question_subject`.`qid`=%d
			AND course.`teacher_uid`=%d";
  $result = db_query($sql, intval($question_nid),intval($techer_uid));
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $reference->sid = intval($reference->sid);
    $reference->cid = intval($reference->cid);
  	$references[] = $reference;
  }
  return $references;
}

/**
 * Implemrntaion of hook_init().
 *
 */
function faze_quiz_course_init() {
  /*
  if ($_GET['q'] === 'manage_questions') {
    //jquery_ui_add(array('ui.draggable', 'ui.droppable'));
    drupal_add_js(drupal_get_path('module', 'faze_quiz_course') . '/js/jquery-ui-1.8.23.custom.min.js');
    drupal_add_js(drupal_get_path('module', 'faze_quiz_course') . '/js/faze_quiz_course_manage_questions.js');
    drupal_add_css(drupal_get_path('module', 'faze_quiz_course') . '/theme/faze_quiz_course_manage_questions.css');
  }
  */
  /*
  if ($_GET['q'] === 'manage_course_student') {
    drupal_add_js(drupal_get_path('module', 'faze_quiz_course') . '/js/jquery-ui-1.8.23.custom.min.js');
    drupal_add_js(drupal_get_path('module', 'faze_quiz_course') . '/js/faze_quiz_course_manage_course_student.js');
    drupal_add_css(drupal_get_path('module', 'faze_quiz_course') . '/theme/faze_quiz_course_manage_course_student.css');
  }
  */
}

/**
 * chack if the user allow to add question to subject.
 * @param $qid
 *   integer question nid.
 * @param $sid
 *   integer subject uid
 * @return
 *   boolean perm.
 */
/*
function faze_quiz_course_menu_add_question_to_subject_access($qid,$sid){
  return true;
}*/

/**
 * add question to subject.
 * @param $qid
 *   integer question nid.
 * @param $sid
 *   integer subject uid
 */
/*
function faze_quiz_course_menu_add_question_to_subject($qid,$sid){
  echo faze_quiz_course_add_question_to_subject($qid, $sid);
}*/


function faze_quiz_course_add_course_form(){
  $form = array();
  
  $form['faze_quiz_course_add_course'] = array(
    '#type' => 'fieldset',
	'#title' => t('הוספת מקצוע'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );
  
  $form['faze_quiz_course_add_course']['faze_quiz_course_name'] = array(
    '#type' => 'textfield',
	'#title' => t('שם המקצוע'),
	'#default_value' => "",
	'#required' => TRUE,
  );

  $form['faze_quiz_course_add_course']['submit'] = array(
    '#type' => 'submit',
	'#value' => t('הוסף'),
  );
  
  return $form;
}

function faze_quiz_course_add_course_form_submit(&$form, &$form_state){
  global $user;
  faze_quiz_course_add_course($form_state['values']['faze_quiz_course_name'],$user->uid);
  drupal_set_message(t("המקצוע נוסף בהצלחה"));
}

function faze_quiz_course_add_subject_form(){
  $form = array();
  
  $form['faze_quiz_course_add_subject'] = array(
    '#type' => 'fieldset',
	'#title' => t('הוספת נושא למקצוע'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );
  
  $form['faze_quiz_course_add_subject']['faze_quiz_course_cid'] = array(
    '#type' => 'select',
	'#title' => t('מקצוע'),
    '#options' => array(),
  );
  
  global $user;
  $courses=faze_quiz_course_get_techer_courses($user->uid);
  foreach ($courses as $course){
    $form['faze_quiz_course_add_subject']['faze_quiz_course_cid']['#options'][$course->cid]=$course->name;
  }

  $form['faze_quiz_course_add_subject']['faze_quiz_course_name'] = array(
    '#type' => 'textfield',
	'#title' => t('שם הנושא'),
	'#default_value' => "",
	'#required' => TRUE,
  );

  $form['faze_quiz_course_add_subject']['submit'] = array(
    '#type' => 'submit',
	'#value' => t('הוסף'),
  );
  
  return $form;
}

function faze_quiz_course_add_subject_form_submit(&$form, &$form_state){
  global $user;
  faze_quiz_course_add_subject($form_state['values']['faze_quiz_course_name'],$form_state['values']['faze_quiz_course_cid']);
  drupal_set_message(t("הנושא נוסף בהצלחה"));
}

/**
 * Implementation of hook_theme()
 */
function faze_quiz_course_theme() { //$existing, $type, $theme, $path
  $path = drupal_get_path('module', 'faze_quiz_course') . '/theme';

  return array(
    'faze_quiz_course_question_table' => array(
      'arguments' => array('question_nodes' => array(), 'faze_quiz_course_filter_table' => null,'headers' => null,$limit => 0,'table_col' => array()),
      'template' => 'faze_quiz_course_question_table',
      'path' => $path,
    ),
    'faze_quiz_course_manage_course_student' => array(
      'arguments' => array('users' => array(), 'faze_quiz_course_filter_table' => null,'headers' => null,$limit => 0),
      'template' => 'faze_quiz_course_manage_course_student',
      'path' => $path,
    ),
    'faze_quiz_course_task_page' => array(
      'arguments' => array('node' =>null,'FixedQuestionTable' => "",'randomQuestion' =>null,'studentArray' =>null),
      'template' => 'faze_quiz_course_task_page',
      'path' => $path,
    ),
    'faze_quiz_course_student_task_block' => array(
      'arguments' => array('student_task' =>null),
      'template' => 'faze_quiz_course_student_task_block_theme',
      'path' => $path,
    ),
    'faze_quiz_course_techer_task_block' => array(
      'arguments' => array('techer_task' =>null),
      'template' => 'faze_quiz_course_techer_task_block_theme',
      'path' => $path,
    ),
    'faze_quiz_course_techer_course_block' => array(
      'arguments' => array('techer_course' =>null),
      'template' => 'faze_quiz_course_techer_course_block_theme',
      'path' => $path,
    ),
    'faze_quiz_course_course_page' => array(
      'arguments' => array('course' =>null, 'studentArray'=>array(),'taskArray'=>array()),
      'template' => 'faze_quiz_course_course_page_theme',
      'path' => $path,)
  );
}

/**
 * Implementation of hook_block()
 */
function faze_quiz_course_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('student task block'), 
      'weight' => 0, 
      'status' => 0, 
    );
    $blocks[1] = array(
      'info' => t('techer task block'), 
      'weight' => 0, 
      'status' => 0, 
    );
    $blocks[2] = array(
      'info' => t('techer course block'), 
      'weight' => 0, 
      'status' => 0, 
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => t('משימות'), 
          'content' => faze_quiz_course_student_task_block(),
        );
        break;
        case 1:
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => t('משימות'), 
          'content' => faze_quiz_course_techer_task_block(),
        );
        break;
        case 2:
        $block = array(
          'subject' => t('מקצועות'), 
          'content' => faze_quiz_course_techer_course_block(),
        );
        break;
    }
    return $block;
  }
}

function faze_quiz_course_get_student_task($uid){
  $sql="SELECT node.nid AS task_nid, node.title AS title, content_type_task.field_course_cid_value AS cid, faze_quiz_course_course.name AS course_name, node.created AS created, faze_quiz_course_course_subject.name AS subject_name
		FROM `node`
		LEFT JOIN content_type_task ON node.vid = content_type_task.vid
		LEFT JOIN faze_quiz_course_course ON content_type_task.field_course_cid_value = faze_quiz_course_course.cid
		LEFT JOIN faze_quiz_course_course_student ON content_type_task.field_course_cid_value = faze_quiz_course_course_student.cid
    LEFT JOIN faze_quiz_course_course_subject ON faze_quiz_course_course.cid = faze_quiz_course_course_subject.cid
		WHERE node.type = 'task'
		AND faze_quiz_course_course_student.uid =%d
		ORDER BY `node`.`created` DESC";
  $result = db_query($sql, $uid);
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $reference->task_nid = intval($reference->task_nid);
    $reference->cid = intval($reference->cid);
    $quiz=faze_quiz_course_get_quiz_by_task_student($reference->task_nid, $uid);
    if ($quiz==null){
      $reference->q_nid=null;
      $reference->completed=null;
    }
    else
    {
      $reference->q_nid=$quiz->q_nid;
      $reference->completed=$quiz->completed;
    }
  	$references[] = $reference;
  }
  return $references;
}

function faze_quiz_course_get_techer_task($uid){
  $sql="SELECT node.nid AS task_nid, node.title AS title, content_type_task.field_course_cid_value AS cid, faze_quiz_course_course.name AS course_name, node.created AS created, faze_quiz_course_course_subject.name AS subject_name
		FROM `node`
		LEFT JOIN content_type_task ON node.vid = content_type_task.vid
    LEFT JOIN faze_quiz_course_course ON content_type_task.field_course_cid_value = faze_quiz_course_course.cid
    LEFT JOIN faze_quiz_course_course_subject ON faze_quiz_course_course.cid = faze_quiz_course_course_subject.cid
		WHERE node.type = 'task'
		AND node.uid =%d
		ORDER BY `node`.`created` DESC";
  $result = db_query($sql, $uid);
  $references = array();
  while (($reference = db_fetch_object($result)) != NULL) {
    $reference->task_nid = intval($reference->task_nid);
    $reference->cid = intval($reference->cid);
    $quiz=faze_quiz_course_get_quiz_by_task_student($reference->task_nid, $uid);
  	$references[] = $reference;
  }
  return $references;
}

function faze_quiz_course_student_task_block(){
  global $user;
  return theme('faze_quiz_course_student_task_block',faze_quiz_course_get_student_task($user->uid));
}

function faze_quiz_course_techer_task_block(){
  global $user;
  return theme('faze_quiz_course_techer_task_block',faze_quiz_course_get_techer_task($user->uid));
}

function faze_quiz_course_techer_course_block(){
  global $user;
  return theme('faze_quiz_course_techer_course_block',faze_quiz_course_get_techer_courses($user->uid));  
}


function faze_quiz_course_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'faze_quiz_quiz_form') {
    $form['#submit'][] = 'faze_quiz_course_end_quiz_event';
  }
}

function faze_quiz_course_end_quiz_event(&$form, &$form_state){
  global $user;
  $quiz_node=$form['#parameters'][2];
  $task_node=node_load($quiz_node->field_task_nid[0]['value']);
  if ($task_node!=null)
    faze_quiz_course_calc_user_level_on_course($user,$task_node->field_course_cid[0]['value']);
}


function faze_quiz_course_calc_user_level_on_course($user,$courseID){
  $num_calculate_quiz=variable_get('faze_quiz_user_level_num_calculate_quiz', 20);
  for ($i=1; $i<=$num_calculate_quiz;$i++ )
  {
    $quiz_grade[$i]["num_of_question"]=0;  //num of question in taxonomy in quiz
    $quiz_grade[$i]["sum_grade"]=0;  // sum grade of question in taxonomy in quiz
    $quiz_grade[$i]["avr_grade"]=0;  // avrge grade of question in taxonomy in quiz
  }
  $level["sum"]=0;
  $level["final"]=0;
  
  $result = db_query("SELECT node.nid AS nid
                      FROM node node 
                      INNER JOIN content_type_quiz ON node.vid = content_type_quiz.vid
                      LEFT JOIN content_type_task ON content_type_task.nid = content_type_quiz.field_task_nid_value
                      WHERE (node.uid = %d) AND (node.type ='quiz') AND (content_type_quiz.field_completed_value = 1) AND content_type_task.field_course_cid_value
                      ORDER BY node.changed DESC LIMIT 0 , %d", $user->uid, $courseID, $num_calculate_quiz);
  $quiz_index=$num_calculate_quiz;
  $sum_quiz_index=0;
  while ($row = db_fetch_object($result)){
    //the last n quiz of the user.
    $quiz_node=node_load($row->nid,null,true);
    for ($i=0; $i<count($quiz_node->field_questions) ;$i++){
      
      //each question in the quiz.
      $question_node=node_load($quiz_node->field_questions[$i]['value'],null,true);
      if ($question_node==null)
        continue;
      $is_correct=($quiz_node->field_answers[$i]['value'] == $question_node->field_correct_answer[0]['value']);
      if ($question_node->field_avrg_time_ans[0]['value']==0)
        $question_node->field_avrg_time_ans[0]['value']=0.001; //for nod div in 0.
      $t=$quiz_node->field_time[$i]['value']/$question_node->field_avrg_time_ans[0]['value'];
      $w=variable_get('faze_quiz_user_level_time_w', 0.7);
      
      $quiz_grade[$quiz_index]["num_of_question"]++;
      
      if(!$is_correct)
        $quiz_grade[$quiz_index]["sum_grade"]+=0;
      elseif ($t>=4)
        $quiz_grade[$quiz_index]["sum_grade"]+=(1-$w);
      else 
        $quiz_grade[$quiz_index]["sum_grade"]+=(1-($w/4)*$t);
      
      $quiz_grade[$quiz_index]["avr_grade"]=$quiz_grade[$quiz_index]["sum_grade"]/$quiz_grade[$quiz_index]["num_of_question"];
    } // end for question in quiz
    
    $sum_quiz_index+=$quiz_index;
    $level["sum"]+=$quiz_grade[$quiz_index]["avr_grade"]*$quiz_index;
    $level["final"]=$level["sum"]/$sum_quiz_index;

    $quiz_index--;
  } // end for quiz
  
  //dsm($level);
  //dsm($quiz_grade);
  db_query("UPDATE faze_quiz_course_course_student
  			SET level=%f
  			WHERE cid=%d
  			AND uid=%d;"
  			,$level["final"],$courseID,$user->uid);  
}
